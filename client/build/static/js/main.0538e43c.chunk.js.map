{"version":3,"sources":["components/SendMessageForm/SendMessageForm.jsx","components/MessageList/MessageList.jsx","App.jsx","serviceWorker.js","index.js"],"names":["SendMessageForm","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","currentMessage","handleMessageOnChange","bind","assertThisInitialized","handleSendMessage","props","inputRef","messageEvent","target","value","setState","e","preventDefault","sendMessage","ReactDOM","findDOMNode","refs","focus","react_default","a","createElement","onSubmit","autoFocus","ref","tabindex","onChange","placeholder","type","onClick","Component","MessageList","messages","length","lastestMessage","focusForm","className","map","message","index","username","key","id","style","backgroundColor","colour","Date","timestamp","toLocaleString","App","_this2","axios","get","then","res","data","protocolPrefix","window","location","protocol","host","ws","WebSocket","concat","addEventListener","msg","JSON","parse","push","send","stringify","SendMessageFormComponent","focusInput","_this3","components_MessageList_MessageList","components_SendMessageForm_SendMessageForm","Boolean","hostname","match","render","BrowserRouter","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0538e43c.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport './SendMessageForm.css'\n\nclass SendMessageForm extends Component {\n\n  constructor() {\n    super()\n    this.state = {\n      currentMessage: \"\"\n    }\n    this.handleMessageOnChange = this.handleMessageOnChange.bind(this);\n    this.handleSendMessage = this.handleSendMessage.bind(this);\n  }\n\n  componentDidMount() {\n    this.props.inputRef(this);\n  }\n\n  handleMessageOnChange(messageEvent) {\n    const currentMessage = messageEvent.target.value;\n    this.setState({ currentMessage });\n  }\n\n  handleSendMessage(e) {\n    e.preventDefault();\n    this.props.sendMessage(this.state.currentMessage);\n    this.setState({ currentMessage: \"\" });\n  }\n\n  focusInput() {\n    ReactDOM.findDOMNode(this.refs.inputRef).focus();\n  }\n\n  render() {\n    return (\n      <div >\n        <form \n        onSubmit={this.handleSendMessage}>\n            <input\n              autoFocus={true}\n              ref=\"inputRef\"\n              tabindex=\"0\"\n              onChange={this.handleMessageOnChange}\n              value={this.state.currentMessage}\n              placeholder=\"Type message here...\"\n              type=\"text\" />\n            <button onClick={this.handleSendMessage} >Send</button>\n        </form>\n      </div>\n    );\n  };\n};\n\nexport default SendMessageForm;","import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport './MessageList.css'\n\nclass MessageList extends Component {\n\n  componentDidMount() {\n    if (this.props.messages.length !== 0) {\n      ReactDOM.findDOMNode(this.refs.lastestMessage).focus();\n      this.props.focusForm();\n    }\n  }\n\n  componentDidUpdate() {\n    if (this.props.messages.length !== 0) {\n      ReactDOM.findDOMNode(this.refs.lastestMessage).focus();\n      this.props.focusForm();\n    }\n  }\n  render() {\n    return (\n      <ul className=\"MessagesList\">\n        {this.props.messages.map((message, index) => {\n          const className = message.username === this.props.username ? \"Message CurrentUser\" : \"Message\";\n          if (index === (this.props.messages.length - 1)) {\n            return (\n              <li className={className} key={message.id}>\n                <div>\n                  <span\n                    className=\"UserColour\"\n                    style={{backgroundColor: message.colour}}\n                  />  \n                </div>\n                <div className=\"MessageContent\" ref=\"lastestMessage\" tabindex=\"0\">\n                  <div className=\"Username\" >\n                    {message.username}\n                  </div>\n                  <div className=\"MessageText\" >\n                    {message.message}\n                  </div>\n                  <div className=\"MessageTime\" >\n                    {new Date(message.timestamp * 1000).toLocaleString('en-GB')}\n                  </div>\n                </div>\n              </li>\n            )\n          } else {\n            return (\n              <li className={className} key={message.id}>\n                <span\n                  className=\"UserColour\"\n                  style={{backgroundColor: message.colour}}\n                />\n                <div className=\"MessageContent\" >\n                  <div className=\"Username\" >\n                    {message.username}\n                  </div>\n                  <div className=\"MessageText\" >\n                    {message.message}\n                  </div>\n                  <div className=\"MessageTime\" >\n                    {new Date(message.timestamp * 1000).toLocaleString('en-GB')}\n                  </div>\n                </div>\n              </li>\n            )\n          }\n          \n        })}\n      </ul>\n    );\n  }\n};\n\nexport default MessageList;","import React, { Component } from 'react';\nimport './App.css';\n\nimport SendMessageForm from './components/SendMessageForm/SendMessageForm';\nimport MessageList from './components/MessageList/MessageList'\n\nimport axios from 'axios';\n\nclass App extends Component {\n\n  constructor() {\n    // Must call super, if using a stateful component.\n    super();\n    this.state = {\n      username: \"\",\n      messages: [],\n      colour: \"\"\n    };\n\n    this.sendMessage = this.sendMessage.bind(this);\n    this.focusForm = this.focusForm.bind(this);\n  }\n\n  componentDidMount() {\n    // const IP = process.env.IP;\n    const IP = \"localhost\";\n\n    // GET uuid username.\n    axios.get(`/api/username`)\n    .then(res => {\n      const username = res.data.username;\n      this.setState({ username });\n    });\n\n    // GET user colour.\n    axios.get(`/api/colour`)\n    .then(res => {\n      const colour = res.data.colour;\n      this.setState({ colour });\n    });\n\n    // GET chat history.\n    axios.get(`/api/chat-history`)\n    .then(res => {\n      const messages = res.data.messages;\n      this.setState({ messages });\n    });\n\n    // Listen to websocket.\n    const protocolPrefix = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\n    let { host } = window.location; // nb: window location contains the port, so host will be localhost:3000 in dev\n    this.ws = new WebSocket(`${protocolPrefix}//${host}/ws`); // dbstates is my websocket route\n\n    // this.ws = new WebSocket(`/api/ws`);\n    this.ws.addEventListener(\"message\", (e) => {\n      const msg = JSON.parse(e.data);\n      const message = { username: msg.username, message: msg.message, timestamp: msg.timestamp, colour: msg.colour };\n      const messages = this.state.messages;\n      messages.push(message);\n      this.setState({ messages });\n    });    \n  }\n\n  sendMessage(message) {\n    const currentMessage = { username: this.state.username, message: message, colour: this.state.colour };\n    this.ws.send(JSON.stringify(currentMessage));\n  }\n\n  focusForm() {\n    this.SendMessageFormComponent.focusInput();\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"AppHeader\">\n          <h3>Anon Chat</h3>\n        </div>\n          <MessageList messages={this.state.messages} username={this.state.username} focusForm={this.focusForm} />\n          <SendMessageForm sendMessage={this.sendMessage} inputRef={ref => {this.SendMessageFormComponent = ref}} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(<BrowserRouter><App /></BrowserRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}